# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
coin_outcomes <- c(0,1)
X <- sum(sample(coin_outcomes, size=50, replace = TRUE))
set.seed(111)
Xs <- replicate(1000, sum(sample(coin_outcomes, size=50, replace = TRUE)))
## Answer
ggplot(data = NULL, aes(x = Xs)) +
geom_histogram(binwidth = 1)
## Answer
ggplot(data = NULL, aes(x = Xs)) +
geom_histogram()
## Answer
ggplot(data = NULL, aes(x = Xs)) +
geom_histogram(binwidth = 1)
## Answer
Xsmean <- summarize(mean = mean(Xs)) %>% as.numeric()
## Answer
Xs.data <- data.frame(Xs)
Xsmean <- summarize(mean = mean(Xs)) %>% as.numeric()
View(Xs.data)
## Answer
Xs.data <- data.frame(Xs)
Xsmean <- Xs.data %>% summarize(mean = mean(Xs)) %>% as.numeric()
Xssd   <- Xs.data %>% summarize(sd = sd(Xs)) %>% as.numeric()
ggplot(data = NULL, aes(x = Xs)) +
geom_blank() +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = dqmean, sd = dqsd), col = "tomato")
## Answer
Xs.data <- data.frame(Xs)
Xsmean <- Xs.data %>% summarize(mean = mean(Xs)) %>% as.numeric()
Xssd   <- Xs.data %>% summarize(sd = sd(Xs)) %>% as.numeric()
ggplot(data = NULL, aes(x = Xs)) +
geom_blank() +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = Xsmean, sd = Xssd))
## Answer
set.seed(333)
Xs_unfair <- replicate(1000, sum(sample(coin_outcomes, size=50, replace = TRUE, prob = c(0.05, 0.95))))
## Answer
set.seed(333)
Xs_unfair <- replicate(1000, sum(sample(coin_outcomes, size=50, replace = TRUE, prob = c(0.95, 0.05))))
## Answer
ggplot(data = NULL, aes(x = Xs)) +
geom_histogram(binwidth = 1)
## Answer
Xs_unfair.data <- data.frame(Xs_unfair)
Xs_unfair_mean <- Xs.data %>% summarize(mean = mean(Xs_unfair)) %>% as.numeric()
Xs_unfair_sd   <- Xs.data %>% summarize(sd = sd(Xs_unfair)) %>% as.numeric()
ggplot(data = NULL, aes(x = Xs_unfair)) +
geom_blank() +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = Xs_unfair_mean, sd = Xs_unfair_sd))
## Answer
ggplot(data = Xs.data, aes(sample = Xs)) + stat_qq() + stat_qq_line()
ggplot(data = Xs_unfair.data, aes(sample = Xs_unfair)) + stat_qq() + stat_qq_line()
## Answer
Xs_unfair.data <- data.frame(Xs_unfair)
Xs_unfair_mean <- Xs.data %>% summarize(mean = mean(Xs_unfair)) %>% as.numeric()
Xs_unfair_sd   <- Xs.data %>% summarize(sd = sd(Xs_unfair)) %>% as.numeric()
ggplot(data = NULL, aes(x = Xs_unfair)) +
geom_blank() +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = Xs_unfair_mean, sd = Xs_unfair_sd))
## Answer
Xs.data <- data.frame(Xs)
Xsmean <- Xs.data %>% summarize(mean = mean(Xs)) %>% as.numeric()
Xssd   <- Xs.data %>% summarize(sd = sd(Xs)) %>% as.numeric()
ggplot(data = NULL, aes(x = Xs)) +
geom_blank() +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = Xsmean, sd = Xssd))
## Answer
ggplot(data = Xs.data, aes(sample = Xs)) + stat_qq() + stat_qq_line()
ggplot(data = Xs_unfair.data, aes(sample = Xs_unfair)) + stat_qq() + stat_qq_line()
source('~/.active-rstudio-document', echo=TRUE)
install.packages("quantmod")
library(quantmod)
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
library(quantmod)
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
class(AAPL)
head(APPL)
getSymbols("AAPL", src = "yahoo", from = start, to = end)
class(AAPL)
head(AAPL)
start <- as.Date("2019-11-01")
end <- as.Date("2019-10-01")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
class(AAPL)
head(AAPL)
start <- as.Date("2019-11-01")
end <- as.Date("2019-10-01")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
class(AAPL)
head(AAPL)
getSymbols("AAPL", src = "yahoo", from = start, to = end)
getSymbols("AAPL", src = "yahoo", from = start, to = end)
class(AAPL)
head(AAPL)
plot(AAPL[, "AAPL.Close"], main = "AAPL")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(tidyverse)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
area <- ames$Gr.Liv.Area
## Code.
pop_mean <- mean(area)
pop_sd <- sd(area)
### Code
xbar_30 <- replicate(100000, mean(sample(area, size = 30)), sd(sample(area, size = 30)))
### Code
xbar_30 <- replicate(100000, mean(sample(area, size = 30)))
mean_xbar_30 <- mean(xbar_30)
sd_xbar_30 <- sd(xbar_30)
### Code
xbar_30 <- replicate(100000, mean(sample(area, size = 30)))
mean_xbar_30 <- mean(xbar_30)
sd_xbar_30 <- sd(xbar_30)
## Code if necessary
repeat_mean <- replicate(100000, mean(sample(area, size = 30)))
repeat_sd <- replicate(100000, sd(sample(area, size = 30)))
## Code if necessary
repeat_mean <- replicate(mean(sample(area, size = 30)))
## Code if necessary
repeat_mean <- replicate(100000, mean(sample(area, size = 30)))
## Code if necessary
repeat_mean <- replicate(100000, mean(sample(area, size = 30)))
mean_repeat <- mean(repeat_mean)
sd_repeat <- sd(repeat_mean)
paste("If we take repeated samples of size 30 from the population, the distribution of sample means will be normal with mean", mean_repeat, "and standard deviation", sd_repeat, ".")
## Code if necessary
repeat_mean <- replicate(100000, mean(sample(area, size = 30)))
mean_repeat <- round(mean(repeat_mean), 2)
sd_repeat <- round(sd(repeat_mean), 2)
paste("If we take repeated samples of size 30 from the population, the distribution of sample means will be normal with mean", mean_repeat, "and standard deviation", sd_repeat, ".")
## Code if necessary
repeat_mean <- replicate(100000, mean(sample(area, size = 30)))
mean_repeat <- round(mean(repeat_mean), 2)
sd_repeat <- round(sd(repeat_mean), 2)
paste("If we take repeated samples of size 30 from the population, the distribution of sample means will be normal with mean", mean_repeat, "and standard deviation", sd_repeat, ".")
## Code if necessary
repeat_mean <- replicate(100000, mean(sample(area, size = 30)))
mean_repeat <- round(mean(repeat_mean), 2)
sd_repeat <- round(sd(repeat_mean), 2)
paste("If we take repeated samples of size 30 from the population, the distribution of sample means will be normal with mean", mean_repeat, "and standard deviation", sd_repeat, ".")
ggplot(data = NULL, aes(x = xbar_30)) +
geom_blank() +
geom_histogram(bins=30, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = mean_xbar_30, sd = sd_xbar_30/sqrt30), col = "tomato")
ggplot(data = NULL, aes(x = xbar_30)) +
geom_blank() +
geom_histogram(bins=30, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = mean_xbar_30, sd = sd_xbar_30/sqrt(30), col = "tomato")
ggplot(data = NULL, aes(x = xbar_30)) +
geom_blank() +
geom_histogram(bins=30, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = mean_xbar_30, sd = sd_xbar_30/sqrt(30)), col = "tomato")
ggplot(data = NULL, aes(x = xbar_30)) +
geom_blank() +
geom_histogram(bins=30, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_mean, sd = pop_sd/sqrt(30)), col = "tomato")
## Code
lower <- pop_p - 1.96*pop_sd/sqrt(30)
upper <- pop_p + 1.96*pop_sd/sqrt(30)
prop_samp <- round(sum(xbar_30 > lower & xbar_30 < upper) / length(xbar_30), digits = 2)
prop_samp
## Code
lower <- pop_mean - 1.96*pop_sd/sqrt(30)
upper <- pop_mean + 1.96*pop_sd/sqrt(30)
prop_samp <- round(sum(xbar_30 > lower & xbar_30 < upper) / length(xbar_30), digits = 2)
prop_samp
ggplot(data = NULL, aes(x = xbar_30)) +
geom_blank() +
geom_histogram(bins=30, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_mean, sd = pop_sd/sqrt(30)), col = "tomato")
# b
choose(100, 97)
# b
choose(9, 2)
# b
choose(100, 97)
# b
choose(100, 97) * .9^97 * .1^3
# b
round(choose(100, 97) * .9^97 * .1^3)
# b
round(choose(100, 97) * .9^97 * .1^3, 5)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
choose(100, 3) * .9^97 * .1^3
# b
round(choose(100, 97) * .9^97 * .1^3, 8)
# c
choose(100, 3) * .9^97 * .1^3
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
choose(100, 3) * .9^97 * .1^3
knitr::opts_chunk$set(echo = TRUE)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
single_family_pop <- as.numeric(ames$Bldg.Type == "1Fam")
knitr::opts_chunk$set(echo = TRUE)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
single_family_pop <- as.numeric(ames$Bldg.Type == "1Fam")
sample_val <- sample(single_family_pop, size = 1)
knitr::opts_chunk$set(echo = TRUE)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
single_family_pop <- as.numeric(ames$Bldg.Type == "1Fam")
sample_val1 <- sample(single_family_pop, size = 1)
sample_val2 <- sample(single_family_pop, size = 2)
sample_val100 <- sample(single_family_pop, size = 100)
knitr::opts_chunk$set(echo = TRUE)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
single_family_pop <- as.numeric(ames$Bldg.Type == "1Fam")
sample_val1 <- sample(single_family_pop, size = 1)
sample_val2 <- sample(single_family_pop, size = 2)
sample_val100 <- sample(single_family_pop, size = 100)
mean(sample_val100)
knitr::opts_chunk$set(echo = TRUE)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
single_family_pop <- as.numeric(ames$Bldg.Type == "1Fam")
sample_val1 <- sample(single_family_pop, size = 1)
sample_val2 <- sample(single_family_pop, size = 2)
sample_val100 <- sample(single_family_pop, size = 100)
mean(sample_val1)
mean(sample_val2)
mean(sample_val100)
knitr::opts_chunk$set(echo = TRUE)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
single_family_pop <- as.numeric(ames$Bldg.Type == "1Fam")
sample_val1 <- sample(single_family_pop, size = 1)
sample_val2 <- sample(single_family_pop, size = 2)
sample_val100 <- sample(single_family_pop, size = 100)
mean(sample_val1)
mean(sample_val2)
mean(sample_val100)
choose(100, 16)
knitr::opts_chunk$set(echo = TRUE)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
single_family_pop <- as.numeric(ames$Bldg.Type == "1Fam")
sample_val1 <- sample(single_family_pop, size = 1)
sample_val2 <- sample(single_family_pop, size = 2)
sample_val100 <- sample(single_family_pop, size = 100)
mean(sample_val1)
mean(sample_val2)
mean(sample_val100)
choose(100, 16) * .1^16 + .9^84
choose(100, 84) * .1^16 + .9^84
choose(100, 84) * .1^16 * .9^84
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
choose(100, 3) * .9^97 * .1^3
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
1 - P(z < -2.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
1 - .017
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
1 - .017
pbinom(3,10,.10)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10, 7) * .9^7 * .1^3
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,3) * .9^3 * .1^7
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,3) * .9^7 * .1^3
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,7) * .9^7 * .1^3
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,3) * .9^7 * .1^3
pbinom(3, size=10, prob=0.1)
# a
120 * .9
# a
120 * .9
sqrt(120*.9*.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
choose(10,0) * .9^10 * .1^0 + choose(10,1) * .9^9 * .1^1 + choose(10,2) * .9^8 * .1^2 + choose(10,3) * .9^7 * .1^3
n <- 15,000
n <- 15000
p <- .09
q <- 1- p
mean <- n * p
std <- sqrt(n(p)(q))
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
?pnorm
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
pnrom(1500, 1350, 35.04)
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
pnorm(1500, 1350, 35.04)
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
pnorm(1500, 1350, 35.04)
source('~/Documents/GitHub/project/analysis.R')
library(dplyr)
source('~/Documents/GitHub/project/analysis.R')
source('~/Documents/GitHub/project/analysis.R')
View(happy_data)
View(country_data)
View(country_2017_data)
gov_trust_df <- happy_data %>%
select(Country, Happiness.Rank, Trust..Government.Corruption.)
View(gov_trust_df)
View(gov_trust_df)
gov_trust_df <- happy_data %>%
select(Country, Happiness.Rank, Freedom, Trust..Government.Corruption.) %>%
arrange(desc(Trust..Government.Corruption.))
View(gov_trust_df)
state_shape <- map_data("world")
library(dplyr)
library(stringr)
library("leaflet")
library("ggplot2")
library("knitr")
state_shape <- map_data("world")
state_shape
# Adding the casuatly per state to the locations of each state
state_shape <- map_data("world") %>%
rename(Country = region) %>%
left_join(gov_trust_df, by = "Country")
gov_trust_df <- happy_data %>%
select(Country, Happiness.Rank, Freedom, Trust..Government.Corruption.) %>%
arrange(desc(Trust..Government.Corruption.))
# Adding the casuatly
state_shape
trust <- gov_trust_df %>% select(Country, Trust..Government.Corruption.)
View(trust)
# Adding the casuatly per state to the locations of each state
state_shape <- map_data("world") %>%
rename(Country = region) %>%
left_join(trust, by = "Country")
View(state_shape)
View(state_shape)
# Adding the casuatly per state to the locations of each state
world_shape <- map_data("world") %>%
rename(Country = region) %>%
left_join(trust, by = "Country")
source('~/Documents/GitHub/project/analysis.R')
library(dplyr)
library(stringr)
library("leaflet")
library("ggplot2")
library("knitr")
source('~/Documents/GitHub/project/analysis.R')
View(world_shape)
gov_trust_df <- happy_data %>%
select(Country, Happiness.Rank, Freedom, Trust..Government.Corruption.) %>%
arrange(desc(Trust..Government.Corruption.))
trust <- gov_trust_df %>% select(Country, Trust..Government.Corruption.)
# Adding the casuatly per state to the locations of each state
world_shape <- map_data("world") %>%
rename(Country = region) %>%
left_join(trust, by = "Country")
# Creates map based on aggregated data
heat_map <- ggplot(world_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = Trust..Government.Corruption.),
color = "black"
) +
coord_map() +
scale_fill_continuous(low = "#431338", high = "431338") +
labs(fill = "Percent of Corruption",
title = "Percent of Corruption in each Country, 2017")
heat_map
world_shape <- map_data("world")
View(world_shape)

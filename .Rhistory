choose(100, 16) * .1^16 + .9^84
choose(100, 84) * .1^16 + .9^84
choose(100, 84) * .1^16 * .9^84
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
choose(100, 3) * .9^97 * .1^3
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
1 - P(z < -2.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
1 - .017
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
1 - .017
pbinom(3,10,.10)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10, 7) * .9^7 * .1^3
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,3) * .9^3 * .1^7
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,3) * .9^7 * .1^3
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,7) * .9^7 * .1^3
pbinom(3, size=10, prob=0.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
# 1 - P(z < -2.1)
choose(10,3) * .9^7 * .1^3
pbinom(3, size=10, prob=0.1)
# a
120 * .9
# a
120 * .9
sqrt(120*.9*.1)
# b
round(choose(100, 97) * .9^97 * .1^3, 4)
# c
round(choose(100, 3) * .9^97 * .1^3, 4)
# d
1 - .1^10
# e
choose(10,0) * .9^10 * .1^0 + choose(10,1) * .9^9 * .1^1 + choose(10,2) * .9^8 * .1^2 + choose(10,3) * .9^7 * .1^3
n <- 15,000
n <- 15000
p <- .09
q <- 1- p
mean <- n * p
std <- sqrt(n(p)(q))
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
?pnorm
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
pnrom(1500, 1350, 35.04)
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
pnorm(1500, 1350, 35.04)
n <- 15000
p <- .09
q <- 1 - p
mean <- n * p
std <- sqrt(n*p*q)
n * p
n * q
pnorm(1500, 1350, 35.04)
print("Hello World")
knitr::opts_chunk$set(echo = TRUE)
paste("Hello World")
paste("Hello World")
paste("Hello World")
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
"During the year 2018, there were ", num_of_shootings, " shootings in the United States. Altogether, all the shootings claimed the lives of ", tot_lives_lost, " people. Out of all of the cities which were impacted by shootings, ", city_most_impacted, " was the most impacted city. To me, this meant more than just looking at the number of people who were killed, but instead also at the total number of shootings which occurred in the city which disturbs the peace and impacts the essence of the city. In addition to the most impacted city, the states which had the highest number of shootings were ", state_high_shoot_to_text, ". Despite both of these states had the highest number of shootings, the state with the highest number of casualties (deaths and those injured), is ", state_highest_casualty, ". Using the data, it is evident that mass shootings are en epidemic and the data can be used to show where this problem occurs the most."
state_high_shoot_to_text <- paste(state_highest_shootings, collapse = " and ")
During the year 2018, there were `r num_of_shootings` shootings in the
United States ([2018 Mass Shooting Source](https://www.gunviolencearchive.org/reports/mass-shooting?year=2018)).
Altogether, all the shootings claimed the lives of
`r tot_lives_lost` people. Out of all of the cities which were impacted
by shootings, `r city_most_impacted` was the most impacted city. To me,
this meant more than just looking at the number of people who were killed,
but instead also at the total number of shootings which occurred in the city
which disturbs the peace and impacts the essence of the city. In addition
to the most impacted city, the states which had the highest number of shootings
were `r state_high_shoot_to_text`. Despite both of these states having had the
highest number of shootings, the state with the highest number of casualties
(deaths and those injured), is `r state_highest_casualty`. Using the data, it
is evident that mass shootings are en epidemic and the data can be used to show
where this problem occurs the most.
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
knitr::opts_chunk$set(echo = TRUE)
library("knitr")
source("analysis.R")
options(warn = -1)
knitr::opts_chunk$set(echo = TRUE)
library("knitr")
source("analysis.R")
options(warn = 0)
source('~/Documents/GitHub/project/analysis.R')
library(dplyr)
library(stringr)
library("leaflet")
library("ggplot2")
library("knitr")
source('~/Documents/GitHub/project/analysis.R')
source('~/Documents/GitHub/project/analysis.R')
install.packages(c("ggpmisc", "rworldmap"))
select(contains("GDP"))
#load packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(rworldmap)
library(plotly)
library(leaflet)
library(ggpmisc)
#load csv
#load csv
happy_df <- read.csv("happy_df.csv", stringsAsFactors = FALSE)
View(happy_df)
library(dplyr)
library(stringr)
library("leaflet")
library("ggplot2")
library("knitr")
setwd("~/Documents/GitHub/project")
country_2017_data <- read.csv("data/2017.csv", stringsAsFactors = FALSE)
country_data <- read.csv("data/country_variabels.csv", stringsAsFactors = FALSE)
colnames(country_data)[colnames(country_data)=="country"] <- "Country"
happy_data <- left_join(country_2017_data, country_data, by = "Country")
write.csv(happy_data, file = "data/happy_df.csv")
#load csv
happy_df <- read.csv("happy_df.csv", stringsAsFactors = FALSE)
View(happy_df)
#look at only GDP related columns
gdp_only_df = h
#load csv
happy_df <- read.csv("happy_df.csv", stringsAsFactors = FALSE)
View(happy_df)
#look at only GDP related columns
gdp_only_df = happy_df %>%
select(contains("GDP"))
#load csv
happy_df <- read.csv("data/happy_df.csv", stringsAsFactors = FALSE)
View(happy_df)
install.packages(c("ggpmisc", "rworldmap"))
#look at only GDP related columns
gdp_only_df = happy_df %>%
select(contains("GDP"))
#data frame with country namesm happy rank, and gdp info
gdp_happy_df = happy_df %>%
select(2:4) %>%
bind_cols(gdp_only_df)
View(gdp_only_df)
View(gdp_happy_df)
gdp_scatter_plot = ggplot(gdp_happy_df,aes(x = Economy..GDP.per.Capita., y = Happiness.Score, color = Happiness.Rank ))+
geom_point(shape = 19, size = 5)+
stat_smooth(method = "lm", col = "black")+
theme_light()+
scale_color_gradient("Happiness Rank", low = "limegreen", high = "black", na.value = "white") +
labs(x = "GDP per Capita",
y = "Happiness Score",
Title = "GDP vs Happiness Score Scatterplot")
gdp_scatter_plot
gov_trust_df <- happy_data %>%
select(Country, Happiness.Rank, Freedom, Trust..Government.Corruption.) %>%
arrange(desc(Trust..Government.Corruption.))
trust <- gov_trust_df %>% select(Country, Trust..Government.Corruption.)
world_shape <- map_data("world") %>%
rename(Country = region) %>%
left_join(trust, by = "Country")
gov_trust_df <- happy_data %>%
select(Country, Happiness.Rank, Freedom, Trust..Government.Corruption.) %>%
arrange(desc(Trust..Government.Corruption.))
gov_trust_df <- happy_data %>%
select(Country, Happiness.Rank, Freedom, Trust..Government.Corruption.) %>%
arrange(desc(Trust..Government.Corruption.))
trust <- gov_trust_df %>% select(Country, Trust..Government.Corruption.)
View(trust)
View(gov_trust_df)
gov-trust_scatter_plot = ggplot(gov_trust_df, aes(x = Trust..Government.Corruption., y = Happiness.Rank, color = Freedom ))+
geom_point(shape = 19, size = 5)+
stat_smooth(method = "lm", col = "black")+
theme_light()+
scale_color_gradient("Degree of Country Freedom", low = "grey", high = "red", na.value = "white") +
labs(x = "Government Trust",
y = "Happiness Rank",
Title = "Gov. Trust vs Happiness Rank Scatterplot")
gov_trust_scatter_plot = ggplot(gov_trust_df, aes(x = Trust..Government.Corruption., y = Happiness.Rank, color = Freedom ))+
geom_point(shape = 19, size = 5)+
stat_smooth(method = "lm", col = "black")+
theme_light()+
scale_color_gradient("Degree of Country Freedom", low = "grey", high = "red", na.value = "white") +
labs(x = "Government Trust",
y = "Happiness Rank",
Title = "Gov. Trust vs Happiness Rank Scatterplot")
View(gov_trust_scatter_plot)
gov_trust_scatter_plot
gov_trust_df <- happy_data %>%
select(Country, Happiness.Score, Happiness.Rank, Freedom, Trust..Government.Corruption.) %>%
arrange(desc(Trust..Government.Corruption.))
gov_trust_scatter_plot = ggplot(gov_trust_df, aes(x = Trust..Government.Corruption., y = Happiness.Score, color = Freedom ))+
geom_point(shape = 19, size = 5)+
stat_smooth(method = "lm", col = "black")+
theme_light()+
scale_color_gradient("Degree of Country Freedom", low = "grey", high = "red", na.value = "white") +
labs(x = "Government Trust",
y = "Happiness Score",
Title = "Gov. Trust vs Happiness Score Scatterplot")
gov_trust_scatter_plot
gdp_scatter_plot
gov_trust_scatter_plot = ggplot(gov_trust_df, aes(x = Happiness.Score, y = Trust..Government.Corruption., color = Freedom ))+
geom_point(shape = 19, size = 5)+
stat_smooth(method = "lm", col = "black")+
theme_light()+
scale_color_gradient("Degree of Country Freedom", low = "grey", high = "red", na.value = "white") +
labs(x = "Government Trust",
y = "Happiness Score",
Title = "Gov. Trust vs Happiness Score Scatterplot")
gov_trust_scatter_plot
gov_trust_scatter_plot = ggplot(gov_trust_df, aes(x = Happiness.Score, y = Trust..Government.Corruption., color = Freedom ))+
geom_point(shape = 19, size = 5)+
stat_smooth(method = "lm", col = "black")+
theme_light()+
scale_color_gradient("Degree of Country Freedom", low = "grey", high = "red", na.value = "white") +
labs(x = "Happiness Score",
y = "Government Trust",
Title = "Happiness Score vs. Gov. Trust Scatterplot")
gov_trust_scatter_plot
gov_trust_scatter_plot = ggplot(gov_trust_df, aes(x = Happiness.Score, y = Trust..Government.Corruption., color = Freedom ))+
geom_point(shape = 19, size = 5)+
stat_smooth(method = "lm", col = "black")+
theme_light()+
scale_color_gradient("Degree of Country Freedom", low = "grey", high = "red") +
labs(x = "Happiness Score",
y = "Government Trust",
Title = "Happiness Score vs. Gov. Trust Scatterplot")
gov_trust_scatter_plot
gov_trust_scatter_plot = ggplot(gov_trust_df,
aes(x = Happiness.Score,
y = Trust..Government.Corruption.,
color = Freedom )) +
geom_point(shape = 20, size = 4) +
stat_smooth(method = "lm", col = "black") +
theme_light()+
scale_color_gradient("Degree of Country Freedom",
low = "grey", high = "red") +
labs(x = "Happiness Score", y = "Government Trust",
Title = "Happiness Score vs. Gov. Trust Scatterplot")
gov_trust_scatter_plot
gov_trust_scatter_plot = ggplot(gov_trust_df,
aes(x = Happiness.Score,
y = Trust..Government.Corruption.,
color = Freedom )) +
geom_point(shape = 20, size = 4) +
stat_smooth(method = "lm", col = "black") +
theme_light()+
scale_color_gradient("Degree of Country Freedom",
low = "grey", high = "purple2") +
labs(x = "Happiness Score", y = "Government Trust",
Title = "Happiness Score vs. Gov. Trust Scatterplot")
#r squared value
gov_trust_scatter_plot
#r squared value
gov_trust.lm = lm(Happiness.Score ~Trust..Government.Corruption., data = gov_trust_df)
gov_trust_r_squared = summary(gov_trust.lm)$r.squared
View(gov_trust.lm)
gov_trust.lm
gov_trust_scatter_plot = ggplot(gov_trust_df,
aes(x = Happiness.Score,
y = Trust..Government.Corruption.,
color = Freedom )) +
geom_point(shape = 20, size = 4) +
stat_smooth(method = "lm", col = "black") +
theme_light()+
scale_color_gradient("Degree of Country Freedom",
low = "grey", high = "purple2") +
labs(x = "Happiness Score", y = "Government Trust",
Title = "Happiness Score vs. Gov. Trust Scatterplot")
#r squared value
gov_trust.lm = lm(Happiness.Score ~Trust..Government.Corruption., data = gov_trust_df)
gov_trust_r_squared = summary(gov_trust.lm)$r.squared
world_shape <- map_data(map = "world") %>%
rename(Country = region) %>%
full_join(gdp_happy_df, by = "Country") %>%
rename(
Longitude = long,
Latitude = lat
)
# Creates map based on aggregated data
heat_map <- ggplot(world_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = Trust..Government.Corruption.),
color = "black"
) +
coord_map() +
scale_fill_continuous(low = "#431338", high = "431338") +
labs(fill = "Percent of Corruption",
title = "Percent of Corruption in each Country, 2017")
heat_map
View(world_shape)
world_shape <- map_data(map = "world") %>%
rename(Country = region) %>%
full_join(gdp_happy_df, by = "Country") %>%
rename(
Longitude = long,
Latitude = lat
)
# Creates map based on aggregated data
heat_map <- ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Trust..Government.Corruption.),
color = "black"
) +
coord_map() +
scale_fill_continuous(low = "#431338", high = "431338") +
labs(fill = "Percent of Corruption",
title = "Percent of Corruption in each Country, 2017")
heat_map
world_shape <- map_data(map = "world") %>%
rename(Country = region) %>%
full_join(gov_trust_df, by = "Country") %>%
rename(
Longitude = long,
Latitude = lat
)
world_shape <- map_data(map = "world") %>%
rename(Country = region) %>%
full_join(gov_trust_df, by = "Country") %>%
rename(
Longitude = long,
Latitude = lat
)
# Creates map based on aggregated data
heat_map <- ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Trust..Government.Corruption.),
color = "black"
) +
coord_map() +
scale_fill_continuous(low = "#431338", high = "431338") +
labs(fill = "Percent of Corruption",
title = "Percent of Corruption in each Country, 2017")
heat_map
make_gdp_map <- function(state_shape) {
ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Economy..GDP.per.Capita.),
color = "gray", # show country outlines
size = .1 # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_gradient(low = "black", high = "lightskyblue", na.value = "white") +
labs(
fill = "GDP Per Capita",
title = "World Map: GDP per Capita "
)
}
ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Economy..GDP.per.Capita.),
color = "gray", # show country outlines
size = .1 # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_gradient(low = "black", high = "lightskyblue", na.value = "white") +
labs(
fill = "GDP Per Capita",
title = "World Map: GDP per Capita "
)
ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Trust..Government.Corruption.),
color = "gray", # show country outlines
size = .1 # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_gradient(low = "black", high = "lightskyblue", na.value = "white") +
labs(
fill = "GDP Per Capita",
title = "World Map: GDP per Capita "
)
ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Trust..Government.Corruption.),
color = "black"
) +
coord_map() +
scale_fill_continuous(low = "#431338", high = "431338", na.values = "white") +
labs(fill = "Percent of Corruption",
title = "Percent of Corruption in each Country, 2017")
# Creates map based on aggregated data
world_shape <- map_data(map = "world") %>%
rename(Country = region) %>%
full_join(gov_trust_df, by = "Country") %>%
rename(
Longitude = long,
Latitude = lat
)
heat_map <- ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Trust..Government.Corruption.),
color = "black"
) +
coord_map() +
scale_fill_continuous(low = "#431338", high = "431338", na.value = "white") +
labs(fill = "Percent of Corruption",
title = "Percent of Corruption in each Country, 2017")
ggplot(world_shape) +
geom_polygon(
mapping = aes(x = Longitude, y = Latitude, group = group, fill = Trust..Government.Corruption.),
color = "black"
) +
coord_map() +
scale_fill_continuous(low = "#431338", high = "431338", na.value = "white") +
labs(fill = "Percent of Corruption",
title = "Percent of Corruption in each Country, 2017")
